package euler;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

/*The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

 Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
 10: 1,2,5,10
 15: 1,3,5,15
 21: 1,3,7,21
 28: 1,2,4,7,14,28
 We can see that 28 is the first triangle number to have over five divisors.

 What is the value of the first triangle number to have over five hundred divisors?
 */
public class Problem0012 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int number = 1;
		while (true) {

			Triangle triangle = new Triangle(number);
			System.out
					.println(triangle.value + " " + triangle.numberOfDivisors);
			if (triangle.numberOfDivisors > 500) {
				break;
			}
			number++;
		}

	}

	static class Triangle {

		int value;
		int numberOfDivisors;
		List<Integer> divisors;

		Triangle(int number) {
			// System.out.println("Instantiating");
			for (int i = 1; i <= number; i++) {
				value += i;
			}

			divisors = getDivisors();
			numberOfDivisors = getNumberOfDivisors();
		}

		int getNumberOfDivisors() {

			return divisors.size();
		}

		List<Integer> getDivisors() {

			int tempValue = value;
			List<Integer> result = new ArrayList<Integer>();

			for (int key = 1; key <= tempValue; key++) {

				if (tempValue % key == 0) {
					result.add(key);

				}

			}

			return result;

		}
	}

}
