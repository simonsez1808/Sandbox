package euler;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Simon Each new term in the Fibonacci sequence is generated by adding
 *         the previous two terms. By starting with 1 and 2, the first 10 terms
 *         will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... By considering the
 *         terms in the Fibonacci sequence whose values do not exceed four
 *         million, find the sum of the even-valued terms.
 */
public class Problem0002 {

	/**
	 * @param args
	 */

	static List<Long> fibMap = new ArrayList<Long>();
	static final long LIMIT = 4000000;

public static void main(String[] args) {
		// TODO Auto-generated method stub
		fibMap.add(new Long(1));
		fibMap.add(new Long(2));
		long sumOfEvens = 2;

		while (true) {
			long newFib = fibMap.get(fibMap.size() - 1)
					+ fibMap.get(fibMap.size() - 2);

			if (newFib < LIMIT) {
				fibMap.add(new Long(newFib));
				if (newFib % 2 == 0) {
					sumOfEvens += newFib;
				}
			} else {
				break;
			}

		}

		System.out.println(sumOfEvens);
	}

}
